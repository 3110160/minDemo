<template>
    <view class="checkbox">
        <block wx:for="{{checkList}}" wx:key="index" wx:for-index="index" wx:for-item="item">
            <view class="checkItem {{item.disabled?'disabled':''}}" data-index="{{index}}" bindtap="onChange">
                <view class="name">{{item.name}}</view>
                <view class="checkBox {{item.checked?'active':''}}"></view>
            </view>
        </block>
    </view>
</template>

<script>
    Array.prototype.contains = function (obj) {
        let i = this.length;
        while (i--) {
            if (this[i] === obj) {
                return true;
            }
        }
        return false;
    };
    export default {
        config: {

        },
        properties: {
            for_key: {
                type: [String],
                value: ''
            },
            for_value: {
                type: [String],
                value: ''
            },
            value: {
                type: [Array],
                value: []
            },
            checkList: {
                type: [Array],
                observer(checkList){
                    let {value,for_key,for_value} = this.data;
                    checkList.length&&checkList.map((item)=>{
                        item.name=item[for_key];
                        item.value=item[for_value];
                        if(value.length&&value.contains(item.value)){
                            item.checked=true;
                        }else {
                            item.checked=false;
                        }
                    });
                    this.setData({checkList:checkList})
                }
            }
        },
        data: {
            names:[]
        },
        methods: {
            onChange(e){
                let {checkList,value,names} = this.data,
                    index = e.currentTarget.dataset.index,
                    item = checkList[index];
                if(item.disabled) return false;
                /*获取value*/
                if(value.contains(item.value)){
                    value = this._delete(value,item.value)
                }else {
                    value.push(item.value)
                }

                /*获取key*/
                if(names.contains(item.name)){
                    names = this._delete(names,item.name)
                }else {
                    names.push(item.name)
                }

                checkList.map((item)=>{
                    if(value.contains(item.value)){
                        item.checked=true;
                    }else {
                        item.checked=false;
                    }
                });
                this.setData({checkList:checkList});
                this.triggerEvent('onChange',{value:value,names:names})
            },
            _delete(p=[],value){
               let dex=null;
               p.length&&p.map((item,index)=>{
                   if(item===value){
                       dex =index
                   }
               });
                p.splice(dex,1);
                return p;
            }
        },
        attached(){

        }

    }
</script>

<style lang="less">
    @import "../theme";
    .checkbox{
        width: 100%;
        background-color:white;
        padding: 0 20rpx;
        box-sizing: border-box;
        .checkItem{
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: space-between;
            line-height: 72rpx;
            font-size: 32rpx;
            color: #666666;
            border-bottom: 2rpx solid rgba(0, 0, 0, 0.05);
            &:last-child{
                border-bottom:none;
            }
            .checkBox{
                width: 28rpx;
                height: 28rpx;
                border-radius: 50%;
                border:2rpx solid rgba(0, 0, 0, 0.18);
                margin-right: 20rpx;
                position: relative;
            }
            .active{
                background-color:@radio_active;
                border-color:@radio_active;
                &::after{
                    content: '';
                    position: absolute;
                    width: 13rpx;
                    height: 13rpx;
                    background-color:white;
                    border-radius: 50%;
                    top: 8rpx;
                    left: 8rpx;
                    transform:scale(1.3);
                    animation:active .2s ease;
                }
            }
        }
        .disabled{
            color: #eeeeee;
            .checkBox{
                border-color:#eeeeee;
                &::after{
                    background-color:#eeeeee;
                }
            }
            .active{
                background-color:@radio_active_disabled;
                border-color:@radio_active_disabled;
                &::after{
                    width: 13rpx;
                    height: 13rpx;
                    background-color:white;
                    border-radius: 50%;
                    top: 8rpx;
                    left: 8rpx;
                    transform:scale(1.3);
                    transition: .2s ease;
                }
            }
        }
    }

    @keyframes active {
        0% {
            transform:scale(0.8);
        }
        100% {
            transform:scale(1.3);
        }
    }
</style>
