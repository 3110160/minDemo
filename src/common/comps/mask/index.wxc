<template>
    <view class="mask {{maskStatus}}">
        <view class="maskBg" style="background: rgba({{backgroundColor}},{{opacity}});" bindtap="omMaskTap"></view>
        <view class="maskContent" style="{{__positionStyle}}">
            <slot></slot>
        </view>
    </view>
</template>

<script>
    /*颜色值 => rgb*/
    function hexToRgb(hex) {
        let color = [];
        let rgb = [];

        hex = hex.replace(/#/, '');

        if (hex.length === 3) {
            let tmp = [];

            for (let i = 0; i < 3; i++) {
                tmp.push(hex.charAt(i) + hex.charAt(i));
            }

            hex = tmp.join('');
        }

        for (let i = 0; i < 3; i++) {
            color[i] = '0x' + hex.substr(i * 2, 2);
            rgb.push(parseInt(Number(color[i])));
        }

        return rgb.join(',');
    }

    export default {
        config: {},
        properties: {
            maskStatus: {
                type: String,
                value: 'hide'
            },
            opacity: {
                type: [String, Number],
                value: 0.6
            },
            backgroundColor: {
                type: String,
                value: '#000000'
            },
            locked: {
                type: [String],
                value: 'hide'
            },
            contentAlign: {
                type: String,
                value: 'tl'
            },
            __positionStyle: {
                type: String,
                value: 'top:0; left:0'
            }
        },
        data: {

        },
        methods: {
            show() {
                this.setData({
                    maskStatus: 'show'
                });
            },
            hide() {
                this.setData({
                    maskStatus: 'hide'
                });
            },
            omMaskTap: function (event) {
                let data = this.data;
                let detail = event.detail;
                let option = {t:'点击旁边消失'};

                if (data.locked && data.locked !== 'true') {
                    this.setData({
                        maskStatus: 'hide'
                    });
                    this.triggerEvent('masktap', detail,option);
                }
            }
        },
        attached(){
            let data = this.data;

            this.setData({
                backgroundColor: hexToRgb(data.backgroundColor)
            });


            let contentAlignStyle;

            switch (data.contentAlign) {
                case 'tl': {
                    contentAlignStyle = 'top:0; left:0';
                    break;
                }

                case 'tr': {
                    contentAlignStyle = 'top:0; right:0';
                    break;
                }

                case 'bl': {
                    contentAlignStyle = 'bottom:0; left:0';
                    break;
                }

                case 'br': {
                    contentAlignStyle = 'bottom:0; right:0';
                    break;
                }

                case 'cc': {
                    contentAlignStyle = 'top: 50%; left: 50%; transform: translate(-50%, -50%);';
                    break;
                }
            }
            this.setData({
                __positionStyle: contentAlignStyle
            });

        }

    }
</script>

<style lang="less">
    .mask {
        width: 100%;
        height: 100%;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 9999;
        .maskBg {
            width: 100%;
            height: 100%;
        }
        .maskContent{
            display: inline-block;
            position: absolute;
            z-index: 1;
        }
    }
    .hide{
        opacity: 0;
        display: none;
        z-index: -10;
    }
    .show{

    }
</style>
