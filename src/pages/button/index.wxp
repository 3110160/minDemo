<template>
  <view class="container">

    <wxc-example title="button type=danger size=large" class="example">
      <wxc-button
              type="danger"
              size="large"
      >
        large
      </wxc-button>
    </wxc-example>

    <wxc-example title="button type=default size=default" class="example">
      <wxc-button
      >
        default
      </wxc-button>
    </wxc-example>

    <wxc-example title="button type=primary size=small" class="example">
      <wxc-button
              type="primary"
              size="small"
      >
        small
      </wxc-button>
    </wxc-example>

    <wxc-example title="button type=warn size=mini" class="example">
      <wxc-button
              type="warn"
              size="mini"
      >
        small
      </wxc-button>
    </wxc-example>


    <wxc-example title="button type=primary size=small disabled=true" class="example">
      <wxc-button
              type="primary"
              disabled="{{true}}"
              size="small"
      >
        small
      </wxc-button>
    </wxc-example>

    <wxc-example title="button type=warn loading" class="example">
      <wxc-button
              type="warn"
              loading="{{loading}}"
              bindmytap="showLoading"
      >
        点我loading
      </wxc-button>
    </wxc-example>
  </view>
</template>

<script>
  const app = getApp();
  import wxrequest from '../../utils/http'
export default {
    config: {
        usingComponents: {
            'wxc-example':'common/comps/example',
            'wxc-button':'common/comps/button'
        }
    },

    data:{
        loading:false
    },
    showLoading(){
        this.setData({
            loading:true
        });
        wxrequest('post','/security/wxmp/login',{
            mobile:'1585713473',
           code:'1513',
        })
            .then((res)=>{
                console.log(res);
                this.setData({
                    loading:false,
                });
            })
            .catch((e)=>{
              console.log(e);
                this.setData({
                    loading:false,
                });
            });
        /*let timer= setTimeout(()=>{
            this.setData({
                loading:false,
            });
            clearTimeout(timer)
        },2000)*/
    },
    //生命周期函数--监听页面加载
    onLoad () {
    },
    //生命周期函数--监听页面初次渲染完成
    onReady(){

    },
    //生命周期函数--监听页面显示
    onShow () {
    },
    //生命周期函数--监听页面隐藏
    onHide(){

    }
}
</script>

<style lang="less">
  .flex_row(){
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
  }
  .flex_column(){
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  .container{
    width: 100%;
    .flex_column;
    justify-content: flex-start;
    .example{
      width: 100%;
    }
    .topPop{
      height: 100rpx;
      width: 100%;
      text-align: center;
      line-height: 72rpx;
      background-color: white;
    }
    .leftPop{
      width:200rpx;
      height: 100%;
      background-color: white;
    }
    .center{
      width:300rpx;
      height:200rpx;
      text-align: center;
      background-color: white;
    }

  }
</style>
